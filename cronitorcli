#!/bin/bash

cron_url="https://cronitor.io/v1/monitors"
curl_cmd="curl --silent"
system=$(uname)

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)

get_con(){
	if [ '${PWD}/cronitorcli.conf' ]; then
		source ${PWD}/cronitorcli.conf
else
	if [ '${HOME}/.cronitorcli.conf' ]; then
		source ${HOME}/.cronitorcli.conf
	fi
fi
}

cron_mes(){
	declare msg="$1"
  [[ $quiet ]] && return
		shift
		pref="----"
	if [[ $1 ]]; then
		pref="${1:0:4}"
    shift
 	 fi
	echo "${yellow}[ $cyan$pref$yellow ]$reset  $msg"
}

cron_err(){
	declare msg="$1"
		cron-logger "ERROR: $msg"
		echo "${yellow}[ ${red}ERRR$yellow ]$reset  $msg"
}



cron_usage(){
    cat <<EOM
Usage: cronitorcli COMMAND

Commands:
  list               List all available cronitor jobs

For more help, check the docs: https://github.com/philcryer/cronitorcli
EOM
}



get_all(){
	$curl_cmd "$cron_url" -u $user_key: | jq .
}

# process positional parameters (if provided)
for arg
do
    if [[ $sub_cmd ]]; then
        if [[ -z $sub_cmd_args ]]; then
            sub_cmd_args="$arg"
        else
            sub_cmd_args="$sub_cmd_args $arg"
        fi
        continue
    fi

    if test -n "$prev_arg"; then
        eval "$prev_arg=\$arg"
        prev_arg=
        continue
    fi

    case "$arg" in
        -*=*) optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$arg" in
        -c | --config | --confi | --conf | --con | --co | --c)
            prev_arg=config
            ;;

        --config=* | --confi=* | --conf=* | --con=* | --co=* | --c=*)
            config="$optarg"
            ;;

        -d | --debug | --debu | --deb | --de | -d)
            DEBUG="ON"
            ;;

        -h | --help | --hel | --he | --h)
            cron_usage
            exit 0;;

        -*)
            echo "$pkg: unknown option: $arg"
            echo "$pkg: Try '$pkg --help' for help."
            exit 1
            ;;

        *)
            if [[ -z $sub_cmd ]]; then
                sub_cmd="$arg"
            else
                echo "$pkg: error: you should not have reached this point in the code"
                exit 10
            fi
            ;;

    esac
done

# make sure a command was provided
if [[ -z $sub_cmd ]]; then
    cron_usage
    exit 2
fi

# commands
case "$sub_cmd" in
	list)
		cron_mes "  sourcing config"
		get_con
		cron_mes "    will list all jobs"
		get_all
		cron_mes "  complete"
		;;

	*)
		cron_mes "unknown command $1"
		exit 2
		;;

esac

exit 0
