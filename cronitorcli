#!/bin/bash

cron_url="https://cronitor.io/v1/monitors"
curl_cmd="curl --silent"
system=$(uname)
host=$(hostname)
datestamp=$(date +'%Y%m%d-%H%M%S')
report=/tmp/cronitorcli_report_${datestamp}.json

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)


src_conf(){
	if [ '${PWD}/cronitorcli.conf' ]; then
		source ${PWD}/cronitorcli.conf
else
	if [ '${HOME}/.cronitorcli.conf' ]; then
		source ${HOME}/.cronitorcli.conf
	fi
fi
}

cron_mes(){
	declare msg="$1"
  [[ $quiet ]] && return
		shift
		pref="----"
	if [[ $1 ]]; then
		pref="${1:0:4}"
    shift
 	 fi
	echo "${yellow}[ $cyan$pref$yellow ]$reset  $msg"
}

cron_err(){
	declare msg="$1"
		cron-logger "ERROR: $msg"
		echo "${yellow}[ ${red}ERRR$yellow ]$reset  $msg"
}

cron_usage(){
    cat <<EOM
Usage: cronitorcli COMMAND

Commands:
  failing            Show currently failing jobs
  list               List all available cronitor jobs
  status             Get the latest status on total number of jobs and failing ones
  status-slack       Same as status, but also post results to Slack (define slack_whook in config)
  total              Display the total number of rules defined

For more help, check the docs: https://github.com/philcryer/cronitorcli
EOM
}

get_json(){
	if [ -f '${report}' ]; then
		rm ${report}
	fi
	cron_mes "  retrieving report " "++++"
	$curl_cmd "$cron_url" -u $user_key: | jq . > ${report}
	cron_mes "  report saved to ${report} " "iiii"
}

get_list(){
	cat ${report}
	cron_mes "  report saved to ${report} " "iiii"
}

get_total(){
	total=$(cat ${report} | jq '.["total_monitor_count"]')
}

get_failing(){
	if [ -f '${report}.out' ]; then
		rm ${report}.out
	fi
	echo "{"
	cat ${report} | jq -r '.monitors[] | select(.is_passing == false) | .name' | tee ${report}.out
	echo "}"
}

put_slack(){
    cron_mes "posting results to slack/#cronitor-failing" "++++"
    slack_curl="curl --silent -X POST --data-urlencode"
    user=$(id -u -n)
#    slack_payload_prefix="payload={\"text\":\"$user@$host:"
    slack_payload_prefix="payload={\"channel\":\"#stax\",\"username\":\"staxbot\",\"icon_emoji\":\":ghost:\",\"text\":\"$user@$host:"

    #slack_payload_postfix=$(${report}.out)
    slack_payload_postfix=`cat ${report}.out`

    #slack_payload="$slack_payload_prefix currently $slack_payload_postfix\"}"
    #slack_payload="$slack_payload_prefix currently failing jobs $slack_payload_postfix"
    #$slack_curl "$slack_payload" "$slack_whook" > /dev/null
    #echo "$slack_curl "$slack_payload" "$slack_whook""

		slack_payload="'payload={"channel": "#cronitor-failing", "username": "cronitor-bot", "text": "${slack_payload_postfix}", "icon_emoji": ":ghost:"}'"
    $slack_curl "$slack_payload" "$slack_whook" > /dev/null

#curl -X POST --data-urlencode 'payload={"channel": "#cronitor-failing", "username": "cronitor-bot", "text": "${slack_payload}", "icon_emoji": ":ghost:"}' "$slack_whook"

#curl -X POST --data-urlencode 'payload={"channel": "#cronitor-failing", "username": "cronitor-bot", "text": "`echo $slack_payload`", "icon_emoji": ":ghost:"}' https://hooks.slack.com/services/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

#curl -X POST --data-urlencode 'payload={"channel": "#cronitor-failing", "username": "webhookbot", "text": "This is posted to #cronitor-failing and comes from a bot named webhookbot.", "icon_emoji": ":ghost:"}' https://hooks.slack.com/services/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


}

# process positional parameters (if provided)
for arg
do
    if [[ $sub_cmd ]]; then
        if [[ -z $sub_cmd_args ]]; then
            sub_cmd_args="$arg"
        else
            sub_cmd_args="$sub_cmd_args $arg"
        fi
        continue
    fi

    if test -n "$prev_arg"; then
        eval "$prev_arg=\$arg"
        prev_arg=
        continue
    fi

    case "$arg" in
        -*=*) optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$arg" in
        -c | --config | --confi | --conf | --con | --co | --c)
            prev_arg=config
            ;;

        --config=* | --confi=* | --conf=* | --con=* | --co=* | --c=*)
            config="$optarg"
            ;;

        -d | --debug | --debu | --deb | --de | -d)
            DEBUG="ON"
            ;;

        -h | --help | --hel | --he | --h)
            cron_usage
            exit 0;;

        -*)
            echo "$pkg: unknown option: $arg"
            echo "$pkg: Try '$pkg --help' for help."
            exit 1
            ;;

        *)
            if [[ -z $sub_cmd ]]; then
                sub_cmd="$arg"
            else
                echo "$pkg: error: you should not have reached this point in the code"
                exit 10
            fi
            ;;

    esac
done

# make sure a command was provided
if [[ -z $sub_cmd ]]; then
    cron_usage
    exit 2
fi

# commands
case "$sub_cmd" in

	failing)
		cron_mes " sourcing config" "++++"
		src_conf
		get_json
		cron_mes "  list failing jobs" "++++"
		get_failing
		cron_mes " complete"
		;;

	list)
		cron_mes " sourcing config" "++++"
		src_conf
		get_json
		cron_mes "  will list all jobs" "++++"
		get_list
		cron_mes " complete"
		;;

	status)
		cron_mes " sourcing config" "++++"
		src_conf
		get_json
		get_total
		cron_mes "  $total jobs" "iiii"
		cron_mes "  currently failing jobs" "++++"
		get_failing
		cron_mes " complete"
		;;

	status-slack)
		cron_mes " sourcing config" "++++"
		src_conf
		get_json
		get_total
		cron_mes "  $total jobs" "iiii"
		cron_mes "  currently failing jobs" "++++"
		get_failing
    put_slack
		cron_mes " complete"
		;;

	total)
		cron_mes " sourcing config" "++++"
		src_conf
		get_json
		cron_mes "  total number of defined jobs" "++++"
		get_total
		cron_mes "  $total jobs" "iiii"
		cron_mes " complete"
		;;

	*)
		cron_mes "unknown command $1"
		exit 2
		;;

esac

exit 0
